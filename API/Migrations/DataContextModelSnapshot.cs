// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API.Model.AdministratorAktivnosti", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Kljuc")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("Sifra")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Uloga")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("AdministratoriAktivnosti");
                });

            modelBuilder.Entity("API.Model.AdministratorNamirnica", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Kljuc")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("Sifra")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Uloga")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("AdministratoriNamirnica");
                });

            modelBuilder.Entity("API.Model.Aktivnost", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("NivoTezine")
                        .HasColumnType("double precision");

                    b.Property<int?>("adminID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("Naziv")
                        .IsUnique();

                    b.HasIndex("adminID");

                    b.ToTable("Aktivnosti");
                });

            modelBuilder.Entity("API.Model.Dan", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Prijava")
                        .HasColumnType("boolean");

                    b.Property<double>("Rezultat")
                        .HasColumnType("double precision");

                    b.Property<int?>("izvestajID")
                        .HasColumnType("integer");

                    b.Property<int>("korisnikID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("korisnikID");

                    b.ToTable("Dani");
                });

            modelBuilder.Entity("API.Model.DanObrok", b =>
                {
                    b.Property<int>("danID")
                        .HasColumnType("integer");

                    b.Property<int>("obrokID")
                        .HasColumnType("integer");

                    b.HasKey("danID", "obrokID");

                    b.HasIndex("obrokID");

                    b.ToTable("DaniObroci");
                });

            modelBuilder.Entity("API.Model.DanTrening", b =>
                {
                    b.Property<int>("danID")
                        .HasColumnType("integer");

                    b.Property<int>("treningID")
                        .HasColumnType("integer");

                    b.HasKey("danID", "treningID");

                    b.HasIndex("treningID");

                    b.ToTable("DaniTreninzi");
                });

            modelBuilder.Entity("API.Model.DvaKorisnika", b =>
                {
                    b.Property<int?>("pracenID")
                        .HasColumnType("integer");

                    b.Property<int?>("pratilacID")
                        .HasColumnType("integer");

                    b.HasKey("pracenID", "pratilacID");

                    b.HasIndex("pratilacID");

                    b.ToTable("ParoviKorisnika");
                });

            modelBuilder.Entity("API.Model.Izvestaj", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Poruka")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Tip")
                        .HasColumnType("integer");

                    b.Property<int>("danID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("danID")
                        .IsUnique();

                    b.ToTable("Izvestaji");
                });

            modelBuilder.Entity("API.Model.Jelo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<double>("EnergetskaVrednost")
                        .HasColumnType("double precision");

                    b.Property<double>("Masa")
                        .HasColumnType("double precision");

                    b.Property<double>("Mast")
                        .HasColumnType("double precision");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Protein")
                        .HasColumnType("double precision");

                    b.Property<string>("Recept")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("UgljeniHidrati")
                        .HasColumnType("double precision");

                    b.Property<int>("korisnikID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("korisnikID");

                    b.ToTable("Jela");
                });

            modelBuilder.Entity("API.Model.JeloNamirnica", b =>
                {
                    b.Property<int>("jeloID")
                        .HasColumnType("integer");

                    b.Property<int>("namirnicaID")
                        .HasColumnType("integer");

                    b.Property<double>("masa")
                        .HasColumnType("double precision");

                    b.HasKey("jeloID", "namirnicaID");

                    b.HasIndex("namirnicaID");

                    b.ToTable("JelaNamirnice");
                });

            modelBuilder.Entity("API.Model.Korisnik", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Kljuc")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Pol")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Sifra")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Slika")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Uloga")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("Ime")
                        .IsUnique();

                    b.ToTable("Korisnici");
                });

            modelBuilder.Entity("API.Model.KorisnikAktivnost", b =>
                {
                    b.Property<int>("korisnikID")
                        .HasColumnType("integer");

                    b.Property<int>("aktivnostID")
                        .HasColumnType("integer");

                    b.HasKey("korisnikID", "aktivnostID");

                    b.HasIndex("aktivnostID");

                    b.ToTable("KorisniciAktivnosti");
                });

            modelBuilder.Entity("API.Model.KorisnikNamirnica", b =>
                {
                    b.Property<int>("korisnikID")
                        .HasColumnType("integer");

                    b.Property<int>("namirnicaID")
                        .HasColumnType("integer");

                    b.HasKey("korisnikID", "namirnicaID");

                    b.HasIndex("namirnicaID");

                    b.ToTable("KorisniciNamirnice");
                });

            modelBuilder.Entity("API.Model.Namirnica", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("DodataMast")
                        .HasColumnType("integer");

                    b.Property<int>("DodatoBrasno")
                        .HasColumnType("integer");

                    b.Property<double>("EnergetskaVrednost")
                        .HasColumnType("double precision");

                    b.Property<double>("Mast")
                        .HasColumnType("double precision");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("PromenaMase")
                        .HasColumnType("double precision");

                    b.Property<double>("Protein")
                        .HasColumnType("double precision");

                    b.Property<int>("Tip")
                        .HasColumnType("integer");

                    b.Property<double>("UgljeniHidrati")
                        .HasColumnType("double precision");

                    b.Property<int>("Vrsta")
                        .HasColumnType("integer");

                    b.Property<int?>("adminID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("Naziv")
                        .IsUnique();

                    b.HasIndex("adminID");

                    b.ToTable("Namirnice");
                });

            modelBuilder.Entity("API.Model.Objava", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Slika")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tekst")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Vreme")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("autorID")
                        .HasColumnType("integer");

                    b.Property<int?>("glavnaID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("autorID");

                    b.HasIndex("glavnaID");

                    b.ToTable("Objave");
                });

            modelBuilder.Entity("API.Model.Obrok", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<double>("EnergetskaVrednost")
                        .HasColumnType("double precision");

                    b.Property<double>("Masa")
                        .HasColumnType("double precision");

                    b.Property<double>("Mast")
                        .HasColumnType("double precision");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Protein")
                        .HasColumnType("double precision");

                    b.Property<double>("UgljeniHidrati")
                        .HasColumnType("double precision");

                    b.Property<int>("korisnikID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("korisnikID");

                    b.ToTable("Obroci");
                });

            modelBuilder.Entity("API.Model.ObrokJelo", b =>
                {
                    b.Property<int>("obrokID")
                        .HasColumnType("integer");

                    b.Property<int>("jeloID")
                        .HasColumnType("integer");

                    b.Property<double>("masa")
                        .HasColumnType("double precision");

                    b.HasKey("obrokID", "jeloID");

                    b.HasIndex("jeloID");

                    b.ToTable("ObrociJela");
                });

            modelBuilder.Entity("API.Model.Ocena", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("Vrednost")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Vreme")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("korisnikID")
                        .HasColumnType("integer");

                    b.Property<int>("objavaID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("korisnikID");

                    b.HasIndex("objavaID");

                    b.ToTable("Ocene");
                });

            modelBuilder.Entity("API.Model.Poruka", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Tekst")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Vreme")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("autorID")
                        .HasColumnType("integer");

                    b.Property<int>("primalacID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("autorID");

                    b.HasIndex("primalacID");

                    b.ToTable("Poruke");
                });

            modelBuilder.Entity("API.Model.Poveznici.AktivnostZahtev", b =>
                {
                    b.Property<int>("zahtevID")
                        .HasColumnType("integer");

                    b.Property<int>("aktivnostID")
                        .HasColumnType("integer");

                    b.HasKey("zahtevID", "aktivnostID");

                    b.HasIndex("aktivnostID");

                    b.ToTable("ZahtevaneAktivnosti");
                });

            modelBuilder.Entity("API.Model.Poveznici.NamirnicaZahtev", b =>
                {
                    b.Property<int>("zahtevID")
                        .HasColumnType("integer");

                    b.Property<int>("namirnicaID")
                        .HasColumnType("integer");

                    b.HasKey("zahtevID", "namirnicaID");

                    b.HasIndex("namirnicaID");

                    b.ToTable("ZahtevaneNamirnice");
                });

            modelBuilder.Entity("API.Model.RezultatZahteva", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Poruka")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Tip")
                        .HasColumnType("integer");

                    b.Property<int>("podnosilacID")
                        .HasColumnType("integer");

                    b.Property<int>("zahtevID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("RezultatiZahteva");
                });

            modelBuilder.Entity("API.Model.Stanje", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<double>("BMR")
                        .HasColumnType("double precision");

                    b.Property<int>("Bmi")
                        .HasColumnType("integer");

                    b.Property<double>("CiljnaKilaza")
                        .HasColumnType("double precision");

                    b.Property<double>("CiljniUnos")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("EnergetskePotrebe")
                        .HasColumnType("double precision");

                    b.Property<double>("Mast")
                        .HasColumnType("double precision");

                    b.Property<double>("Protein")
                        .HasColumnType("double precision");

                    b.Property<double>("Tezina")
                        .HasColumnType("double precision");

                    b.Property<double>("UgljeniHidrati")
                        .HasColumnType("double precision");

                    b.Property<double>("Visina")
                        .HasColumnType("double precision");

                    b.Property<int>("korisnikID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("korisnikID");

                    b.ToTable("Stanja");
                });

            modelBuilder.Entity("API.Model.Trening", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("NivoTezine")
                        .HasColumnType("double precision");

                    b.Property<int>("Vreme")
                        .HasColumnType("integer");

                    b.Property<int>("korisnikID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("korisnikID");

                    b.ToTable("Treninzi");
                });

            modelBuilder.Entity("API.Model.TreningAktivnost", b =>
                {
                    b.Property<int>("treningID")
                        .HasColumnType("integer");

                    b.Property<int>("aktivnostID")
                        .HasColumnType("integer");

                    b.Property<int>("vreme")
                        .HasColumnType("integer");

                    b.HasKey("treningID", "aktivnostID");

                    b.HasIndex("aktivnostID");

                    b.ToTable("TreninziAktivnosti");
                });

            modelBuilder.Entity("API.Model.ZahtevAktivnosti", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("NazivAktivnosti")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Podnet")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Poruka")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Prihvacen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Prijava")
                        .HasColumnType("boolean");

                    b.Property<int>("Stanje")
                        .HasColumnType("integer");

                    b.Property<int>("Tip")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Zakljucen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("adminID")
                        .HasColumnType("integer");

                    b.Property<int>("podnosilacID")
                        .HasColumnType("integer");

                    b.Property<int?>("rezultatID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("adminID");

                    b.HasIndex("podnosilacID");

                    b.HasIndex("rezultatID")
                        .IsUnique();

                    b.ToTable("ZahteviAktivnosti");
                });

            modelBuilder.Entity("API.Model.ZahtevNamirnice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("NazivNamirnice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Podnet")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Poruka")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Prihvacen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Prijava")
                        .HasColumnType("boolean");

                    b.Property<int>("Stanje")
                        .HasColumnType("integer");

                    b.Property<int>("Tip")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Zakljucen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("adminID")
                        .HasColumnType("integer");

                    b.Property<int>("podnosilacID")
                        .HasColumnType("integer");

                    b.Property<int?>("rezultatID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("adminID");

                    b.HasIndex("podnosilacID");

                    b.HasIndex("rezultatID")
                        .IsUnique();

                    b.ToTable("ZahteviNamirnica");
                });

            modelBuilder.Entity("API.Model.ZahtevZaPracenje", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("Podnet")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Poruka")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Prihvacen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Prijava")
                        .HasColumnType("boolean");

                    b.Property<int>("Stanje")
                        .HasColumnType("integer");

                    b.Property<int>("Tip")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Zakljucen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("podnosilacID")
                        .HasColumnType("integer");

                    b.Property<int>("pracenID")
                        .HasColumnType("integer");

                    b.Property<int?>("rezultatID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("podnosilacID");

                    b.HasIndex("pracenID");

                    b.HasIndex("rezultatID")
                        .IsUnique();

                    b.ToTable("ZahteviZaPracenje");
                });

            modelBuilder.Entity("API.Model.Aktivnost", b =>
                {
                    b.HasOne("API.Model.AdministratorAktivnosti", "admin")
                        .WithMany("aktivnosti")
                        .HasForeignKey("adminID");

                    b.Navigation("admin");
                });

            modelBuilder.Entity("API.Model.Dan", b =>
                {
                    b.HasOne("API.Model.Korisnik", "korisnik")
                        .WithMany("dani")
                        .HasForeignKey("korisnikID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("korisnik");
                });

            modelBuilder.Entity("API.Model.DanObrok", b =>
                {
                    b.HasOne("API.Model.Dan", "dan")
                        .WithMany("obroci")
                        .HasForeignKey("danID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Model.Obrok", "obrok")
                        .WithMany("dani")
                        .HasForeignKey("obrokID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("dan");

                    b.Navigation("obrok");
                });

            modelBuilder.Entity("API.Model.DanTrening", b =>
                {
                    b.HasOne("API.Model.Dan", "dan")
                        .WithMany("treninzi")
                        .HasForeignKey("danID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Model.Trening", "trening")
                        .WithMany("dani")
                        .HasForeignKey("treningID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("dan");

                    b.Navigation("trening");
                });

            modelBuilder.Entity("API.Model.DvaKorisnika", b =>
                {
                    b.HasOne("API.Model.Korisnik", "pracen")
                        .WithMany("pratioci")
                        .HasForeignKey("pracenID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Model.Korisnik", "pratilac")
                        .WithMany("prati")
                        .HasForeignKey("pratilacID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("pracen");

                    b.Navigation("pratilac");
                });

            modelBuilder.Entity("API.Model.Izvestaj", b =>
                {
                    b.HasOne("API.Model.Dan", "dan")
                        .WithOne("izvestaj")
                        .HasForeignKey("API.Model.Izvestaj", "danID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("dan");
                });

            modelBuilder.Entity("API.Model.Jelo", b =>
                {
                    b.HasOne("API.Model.Korisnik", "korisnik")
                        .WithMany("jela")
                        .HasForeignKey("korisnikID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("korisnik");
                });

            modelBuilder.Entity("API.Model.JeloNamirnica", b =>
                {
                    b.HasOne("API.Model.Jelo", "jelo")
                        .WithMany("namirnice")
                        .HasForeignKey("jeloID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Model.Namirnica", "namirnica")
                        .WithMany("jela")
                        .HasForeignKey("namirnicaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("jelo");

                    b.Navigation("namirnica");
                });

            modelBuilder.Entity("API.Model.KorisnikAktivnost", b =>
                {
                    b.HasOne("API.Model.Aktivnost", "aktivnost")
                        .WithMany("korisnici")
                        .HasForeignKey("aktivnostID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Model.Korisnik", "korisnik")
                        .WithMany("aktivnosti")
                        .HasForeignKey("korisnikID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("aktivnost");

                    b.Navigation("korisnik");
                });

            modelBuilder.Entity("API.Model.KorisnikNamirnica", b =>
                {
                    b.HasOne("API.Model.Korisnik", "korisnik")
                        .WithMany("namirnice")
                        .HasForeignKey("korisnikID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Model.Namirnica", "namirnica")
                        .WithMany("korisnici")
                        .HasForeignKey("namirnicaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("korisnik");

                    b.Navigation("namirnica");
                });

            modelBuilder.Entity("API.Model.Namirnica", b =>
                {
                    b.HasOne("API.Model.AdministratorNamirnica", "admin")
                        .WithMany("namirnice")
                        .HasForeignKey("adminID");

                    b.Navigation("admin");
                });

            modelBuilder.Entity("API.Model.Objava", b =>
                {
                    b.HasOne("API.Model.Korisnik", "autor")
                        .WithMany("objave")
                        .HasForeignKey("autorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Model.Objava", "glavna")
                        .WithMany("komentari")
                        .HasForeignKey("glavnaID");

                    b.Navigation("autor");

                    b.Navigation("glavna");
                });

            modelBuilder.Entity("API.Model.Obrok", b =>
                {
                    b.HasOne("API.Model.Korisnik", "korisnik")
                        .WithMany("obroci")
                        .HasForeignKey("korisnikID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("korisnik");
                });

            modelBuilder.Entity("API.Model.ObrokJelo", b =>
                {
                    b.HasOne("API.Model.Jelo", "jelo")
                        .WithMany("obroci")
                        .HasForeignKey("jeloID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Model.Obrok", "obrok")
                        .WithMany("jela")
                        .HasForeignKey("obrokID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("jelo");

                    b.Navigation("obrok");
                });

            modelBuilder.Entity("API.Model.Ocena", b =>
                {
                    b.HasOne("API.Model.Korisnik", "korisnik")
                        .WithMany("ocene")
                        .HasForeignKey("korisnikID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Model.Objava", "objava")
                        .WithMany("ocene")
                        .HasForeignKey("objavaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("korisnik");

                    b.Navigation("objava");
                });

            modelBuilder.Entity("API.Model.Poruka", b =>
                {
                    b.HasOne("API.Model.Korisnik", "autor")
                        .WithMany("poslatePoruke")
                        .HasForeignKey("autorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Model.Korisnik", "primalac")
                        .WithMany("primljenePoruke")
                        .HasForeignKey("primalacID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("autor");

                    b.Navigation("primalac");
                });

            modelBuilder.Entity("API.Model.Poveznici.AktivnostZahtev", b =>
                {
                    b.HasOne("API.Model.ZahtevAktivnosti", "zahtev")
                        .WithMany("aktivnosti")
                        .HasForeignKey("aktivnostID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Model.Aktivnost", "aktivnost")
                        .WithMany("zahtevi")
                        .HasForeignKey("zahtevID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("aktivnost");

                    b.Navigation("zahtev");
                });

            modelBuilder.Entity("API.Model.Poveznici.NamirnicaZahtev", b =>
                {
                    b.HasOne("API.Model.Namirnica", "namirnica")
                        .WithMany("zahtevi")
                        .HasForeignKey("namirnicaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Model.ZahtevNamirnice", "zahtev")
                        .WithMany("namirnice")
                        .HasForeignKey("zahtevID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("namirnica");

                    b.Navigation("zahtev");
                });

            modelBuilder.Entity("API.Model.Stanje", b =>
                {
                    b.HasOne("API.Model.Korisnik", "korisnik")
                        .WithMany("stanja")
                        .HasForeignKey("korisnikID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("korisnik");
                });

            modelBuilder.Entity("API.Model.Trening", b =>
                {
                    b.HasOne("API.Model.Korisnik", "korisnik")
                        .WithMany("treninzi")
                        .HasForeignKey("korisnikID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("korisnik");
                });

            modelBuilder.Entity("API.Model.TreningAktivnost", b =>
                {
                    b.HasOne("API.Model.Aktivnost", "aktivnost")
                        .WithMany("treninzi")
                        .HasForeignKey("aktivnostID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Model.Trening", "trening")
                        .WithMany("aktivnosti")
                        .HasForeignKey("treningID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("aktivnost");

                    b.Navigation("trening");
                });

            modelBuilder.Entity("API.Model.ZahtevAktivnosti", b =>
                {
                    b.HasOne("API.Model.AdministratorAktivnosti", "admin")
                        .WithMany("zahtevi")
                        .HasForeignKey("adminID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Model.Korisnik", "podnosilac")
                        .WithMany("zahteviAktivnosti")
                        .HasForeignKey("podnosilacID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Model.RezultatZahteva", "rezultat")
                        .WithOne("zAktivnosti")
                        .HasForeignKey("API.Model.ZahtevAktivnosti", "rezultatID");

                    b.Navigation("admin");

                    b.Navigation("podnosilac");

                    b.Navigation("rezultat");
                });

            modelBuilder.Entity("API.Model.ZahtevNamirnice", b =>
                {
                    b.HasOne("API.Model.AdministratorNamirnica", "admin")
                        .WithMany("zahtevi")
                        .HasForeignKey("adminID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Model.Korisnik", "podnosilac")
                        .WithMany("zahteviNamirnica")
                        .HasForeignKey("podnosilacID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Model.RezultatZahteva", "rezultat")
                        .WithOne("zNamirnice")
                        .HasForeignKey("API.Model.ZahtevNamirnice", "rezultatID");

                    b.Navigation("admin");

                    b.Navigation("podnosilac");

                    b.Navigation("rezultat");
                });

            modelBuilder.Entity("API.Model.ZahtevZaPracenje", b =>
                {
                    b.HasOne("API.Model.Korisnik", "podnosilac")
                        .WithMany("poslatiZahteviZaPracenje")
                        .HasForeignKey("podnosilacID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Model.Korisnik", "pracen")
                        .WithMany("dobijeniZahteviZaPracenje")
                        .HasForeignKey("pracenID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Model.RezultatZahteva", "rezultat")
                        .WithOne("zPracenja")
                        .HasForeignKey("API.Model.ZahtevZaPracenje", "rezultatID");

                    b.Navigation("podnosilac");

                    b.Navigation("pracen");

                    b.Navigation("rezultat");
                });

            modelBuilder.Entity("API.Model.AdministratorAktivnosti", b =>
                {
                    b.Navigation("aktivnosti");

                    b.Navigation("zahtevi");
                });

            modelBuilder.Entity("API.Model.AdministratorNamirnica", b =>
                {
                    b.Navigation("namirnice");

                    b.Navigation("zahtevi");
                });

            modelBuilder.Entity("API.Model.Aktivnost", b =>
                {
                    b.Navigation("korisnici");

                    b.Navigation("treninzi");

                    b.Navigation("zahtevi");
                });

            modelBuilder.Entity("API.Model.Dan", b =>
                {
                    b.Navigation("izvestaj");

                    b.Navigation("obroci");

                    b.Navigation("treninzi");
                });

            modelBuilder.Entity("API.Model.Jelo", b =>
                {
                    b.Navigation("namirnice");

                    b.Navigation("obroci");
                });

            modelBuilder.Entity("API.Model.Korisnik", b =>
                {
                    b.Navigation("aktivnosti");

                    b.Navigation("dani");

                    b.Navigation("dobijeniZahteviZaPracenje");

                    b.Navigation("jela");

                    b.Navigation("namirnice");

                    b.Navigation("objave");

                    b.Navigation("obroci");

                    b.Navigation("ocene");

                    b.Navigation("poslatePoruke");

                    b.Navigation("poslatiZahteviZaPracenje");

                    b.Navigation("prati");

                    b.Navigation("pratioci");

                    b.Navigation("primljenePoruke");

                    b.Navigation("stanja");

                    b.Navigation("treninzi");

                    b.Navigation("zahteviAktivnosti");

                    b.Navigation("zahteviNamirnica");
                });

            modelBuilder.Entity("API.Model.Namirnica", b =>
                {
                    b.Navigation("jela");

                    b.Navigation("korisnici");

                    b.Navigation("zahtevi");
                });

            modelBuilder.Entity("API.Model.Objava", b =>
                {
                    b.Navigation("komentari");

                    b.Navigation("ocene");
                });

            modelBuilder.Entity("API.Model.Obrok", b =>
                {
                    b.Navigation("dani");

                    b.Navigation("jela");
                });

            modelBuilder.Entity("API.Model.RezultatZahteva", b =>
                {
                    b.Navigation("zAktivnosti");

                    b.Navigation("zNamirnice");

                    b.Navigation("zPracenja");
                });

            modelBuilder.Entity("API.Model.Trening", b =>
                {
                    b.Navigation("aktivnosti");

                    b.Navigation("dani");
                });

            modelBuilder.Entity("API.Model.ZahtevAktivnosti", b =>
                {
                    b.Navigation("aktivnosti");
                });

            modelBuilder.Entity("API.Model.ZahtevNamirnice", b =>
                {
                    b.Navigation("namirnice");
                });
#pragma warning restore 612, 618
        }
    }
}
